generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String     @id @default(uuid())
  email     String  @unique
  password String
  firstName String?
  lastName  String?
  role Role @default(USER)
}

model Category {
  id String @id @default(uuid())
  name String @unique
  description String?
  isActive Boolean @default(true)
  metaTitle String?
  metaDescription String?
  keywords String?
  slug String?
  canonicalUrl String?
  robotsTag String?
  orderIndex Int      @default(autoincrement())
  products CategoriesOnProducts[]
  images CategoryImage[]
}

model Product {
  id String @id @default(uuid())
  name String
  description String?
  isActive Boolean @default(true)
  tag String[]
  metaTitle String?
  metaDescription String?
  keywords String?
  slug String?
  canonicalUrl String?
  robotsTag String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  categories CategoriesOnProducts[]
  images ProductImage[]
  format ProductFormat[]
  artist Artist?  @relation(fields: [artistId], references: [id])
  artistId  String?
  }

model ProductImage {
  id String @id @default(uuid())
  url String
  imageDescription String
  product Product @relation(fields:[productId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  productId String
}
model ProductFormat {
  id              String  @id @default(uuid())
  formatName      String
  quantityStock   Int @default(0)
  price           Decimal @default(0.00)
  product         Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId       String
}

model CategoryImage {
  id String @id @default(uuid())
  url String
  imageDescription String
  category Category @relation(fields:[categoryId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String
}

model CategoriesOnProducts {
  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  String 
  category   Category @relation(fields: [categoryId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  categoryId String 
  assignedAt DateTime @default(now())

  @@id([productId, categoryId])
}

model Artist {
  id           String    @id @default(uuid())
  name         String
  bio          String?
  website      String?
  products     Product[] 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
}

model Header {
  id  String @id @default(uuid())
  url String 
  alt String
}
